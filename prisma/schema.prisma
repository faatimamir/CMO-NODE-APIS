generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id            String    @id @default(uuid())
  email              String    @unique
  first_name         String?
  last_name          String?
  is_email_verified  Boolean   @default(false)
  is_mfa_enabled     Boolean   @default(false)
  account_status     String    @default("active")
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())
  last_login         DateTime?
  deletion_requested_at DateTime?

  user_websites          user_websites[]
  authentication_methods authentication_methods[]
  magic_links            magic_links[]
  user_roles             user_roles[]
  sessions               sessions[]
  audit_logs             audit_logs[]
  login_attempts         login_attempts[]
  mfa_methods            mfa_methods[]
  email_verifications    email_verifications[]
  api_keys               api_keys[]
}

model user_websites {
  website_id   String  @id @default(uuid())
  user_id      String
  website_url  String
  website_type String?
  website_name String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  users                      users   @relation(fields: [user_id], references: [user_id])
  brand_website_analysis     brand_website_analysis[]
  brand_traffic_analysis     brand_traffic_analysis[]
  brand_social_media_analysis brand_social_media_analysis[]
  competitor_analysis        competitor_analysis[]
}

model authentication_methods {
  auth_id                String   @id @default(uuid())
  user_id                String
  auth_type              String
  auth_provider_id       String?
  webauthn_credential_id String?
  public_key             String?
  credential_device_type String?
  last_used              DateTime?
  created_at             DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model magic_links {
  magic_link_id String   @id @default(uuid())
  user_id       String
  token_hash    String
  expires_at    DateTime
  used_at       DateTime?
  created_at    DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}


model roles {
  role_id    String        @id @default(uuid())
  role_name  String        @unique
  description String?

  user_roles        user_roles[]
  role_permissions  role_permissions[]
}

model permissions {
  permission_id   String       @id @default(uuid())
  permission_name String       @unique
  description     String?

  role_permissions role_permissions[]
}

model role_permissions {
  role_id       String
  permission_id String

  roles        roles        @relation(fields: [role_id], references: [role_id])
  permissions  permissions  @relation(fields: [permission_id], references: [permission_id])

  @@id([role_id, permission_id])
}

model user_roles {
  user_id String
  role_id String

  users users @relation(fields: [user_id], references: [user_id])
  roles roles @relation(fields: [role_id], references: [role_id])

  @@id([user_id, role_id])
}

model sessions {
  session_id String   @id @default(uuid())
  user_id    String
  token      String   @db.LongText
  device_info Json?
  ip_address String?
  expires_at DateTime
  created_at DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model audit_logs {
  log_id            String   @id @default(uuid())
  user_id           String?
  action_type       String
  resource_affected String
  ip_address        String?
  device_info       Json?
  timestamp         DateTime @default(now())

  users users? @relation(fields: [user_id], references: [user_id])
}

model login_attempts {
  attempt_id  String   @id @default(uuid())
  user_id     String
  auth_method String
  status      String
  ip_address  String?
  user_agent  String?
  timestamp   DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model mfa_methods {
  mfa_id        String   @id @default(uuid())
  user_id       String
  mfa_type      String
  secret        String
  phone_number  String?
  is_verified   Boolean  @default(false)
  created_at    DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model email_verifications {
  verification_id String   @id @default(uuid())
  user_id         String
  token_hash      String
  expires_at      DateTime
  used_at         DateTime?
  created_at      DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model api_keys {
  key_id     String   @id @default(uuid())
  user_id    String
  service_name String
  encrypted_key String
  created_at DateTime @default(now())
  revoked_at DateTime?

  users users @relation(fields: [user_id], references: [user_id])
}

model system_settings {
  setting_id   String   @id @default(uuid())
  setting_key  String   @unique
  setting_value String
  description   String?
  updated_at    DateTime @default(now())
}

model data_retention_policies {
  policy_id           String   @id @default(uuid())
  data_type           String
  retention_period_days Int
  description         String?
  created_at          DateTime @default(now())
}

model brand_website_analysis {
  website_analysis_id String   @id @default(uuid())
  website_id          String
  performance_score   Float?
  seo_score           Float?
  missing_image_alts  Int?
  first_contentful_paint String?
  largest_contentful_paint String?
  total_blocking_time String?
  speed_index         String?
  cumulative_layout_shift String?
  time_to_interactive String?
  total_broken_links  Int?
  broken_links        Json?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model brand_traffic_analysis {
  traffic_analysis_id String   @id @default(uuid())
  website_id          String
  total_visitors      Int?
  organic_search      Int?
  direct              Int?
  referral            Int?
  organic_social      Int?
  unassigned          Int?
  high_bounce_pages   Json?
  top_countries       Json?
  overall_bounce_rate Float?
  actionable_fix      String?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model brand_social_media_analysis {
  social_media_id String   @id @default(uuid())
  website_id      String
  platform_name   String
  followers       Int?
  likes           Int?
  comments        Int?
  shares          Int?
  videos_count    Int?
  posts_count     Int?
  engagement_rate Float?
  data            Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model competitor_analysis {
  competitor_id String   @id @default(uuid())
  website_id    String
  domain_authority Int?
  organic_traffic  Int?
  top_keywords     Json?
  backlink_profile Json?
  social_media_engagement Json?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}
