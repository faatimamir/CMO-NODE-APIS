// ---------------------------
// Prisma schema (updated)
// ---------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id               String    @id @default(uuid())
  email                 String    @unique
  first_name            String?
  last_name             String?
  user_type             String?
  is_email_verified     Boolean   @default(false)
  is_mfa_enabled        Boolean   @default(false)
  account_status        String    @default("active")
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now()) @updatedAt
  last_login            DateTime?
  deletion_requested_at DateTime?

  // relations
  user_websites          user_websites[]
  authentication_methods authentication_methods[]
  magic_links            magic_links[]
  user_roles             user_roles[]
  sessions               sessions[]
  audit_logs             audit_logs[]
  login_attempts         login_attempts[]
  mfa_methods            mfa_methods[]
  email_verifications    email_verifications[]
  api_keys               api_keys[]
  user_requirements      user_requirements[]
  analysis_status        analysis_status[]
  subscriptions          subscriptions[]
  payments               payments[]
}

model user_websites {
  user_id      String
  website_id   String   @default(uuid()) @unique
  website_url  String
  website_type String?
  website_name String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  // relations
  users                       users                         @relation(fields: [user_id], references: [user_id])
  brand_website_analysis      brand_website_analysis[]
  brand_traffic_analysis      brand_traffic_analysis[]
  brand_social_media_analysis brand_social_media_analysis[]
  website_scraped_data        website_scraped_data?         @relation("WebsiteScrapedData_UserWebsite")
  competitor_data     competitor_data[]
  llm_responses           llm_responses?
  user_requirements           user_requirements[]
  analysis_status             analysis_status[]
  payments                    payments[]

  @@id([user_id, website_id]) //  Composite primary key
  @@unique([user_id, website_id], name: "user_id_website_id") //  Enables findUnique
}


model authentication_methods {
  auth_id                String    @id @default(uuid())
  user_id                String
  auth_type              String
  auth_provider_id       String?
  webauthn_credential_id String?
  public_key             String?
  credential_device_type String?
  last_used              DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model magic_links {
  magic_link_id String    @id @default(uuid())
  user_id       String
  token_hash    String
  expires_at    DateTime
  used_at       DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model roles {
  role_id     String   @id @default(uuid())
  role_name   String   @unique
  description String?
  updated_at  DateTime @default(now()) @updatedAt

  user_roles       user_roles[]
  role_permissions role_permissions[]
}

model permissions {
  permission_id   String   @id @default(uuid())
  permission_name String   @unique
  description     String?
  updated_at      DateTime @default(now()) @updatedAt

  role_permissions role_permissions[]
}

model role_permissions {
  role_id       String
  permission_id String

  roles       roles       @relation(fields: [role_id], references: [role_id])
  permissions permissions @relation(fields: [permission_id], references: [permission_id])

  @@id([role_id, permission_id])
}

model user_roles {
  user_id String
  role_id String

  users users @relation(fields: [user_id], references: [user_id])
  roles roles @relation(fields: [role_id], references: [role_id])

  @@id([user_id, role_id])
}

model sessions {
  session_id  String   @id @default(uuid())
  user_id     String
  token       String   @db.LongText
  device_info Json?
  ip_address  String?
  expires_at  DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model audit_logs {
  log_id            String   @id @default(uuid())
  user_id           String?
  action_type       String
  resource_affected String
  ip_address        String?
  device_info       Json?
  timestamp         DateTime @default(now())

  users users? @relation(fields: [user_id], references: [user_id])
}

model login_attempts {
  attempt_id  String   @id @default(uuid())
  user_id     String
  auth_method String
  status      String
  ip_address  String?
  user_agent  String?
  timestamp   DateTime @default(now())

  users users @relation(fields: [user_id], references: [user_id])
}

model mfa_methods {
  mfa_id       String   @id @default(uuid())
  user_id      String
  mfa_type     String
  secret       String
  phone_number String?
  is_verified  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model email_verifications {
  verification_id String    @id @default(uuid())
  user_id         String
  token_hash      String
  expires_at      DateTime
  used_at         DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model api_keys {
  key_id        String    @id @default(uuid())
  user_id       String
  service_name  String
  encrypted_key String
  created_at    DateTime  @default(now())
  revoked_at    DateTime?
  updated_at    DateTime  @default(now()) @updatedAt

  users users @relation(fields: [user_id], references: [user_id])
}

model system_settings {
  setting_id    String   @id @default(uuid())
  setting_key   String   @unique
  setting_value String
  description   String?
  updated_at    DateTime @default(now()) @updatedAt
}

model data_retention_policies {
  policy_id             String   @id @default(uuid())
  data_type             String
  retention_period_days Int
  description           String?
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now()) @updatedAt
}

model brand_website_analysis {
  website_analysis_id      String   @id @default(uuid())
  website_id               String
  performance_score        Float?
  seo_score                Float?
  first_contentful_paint   String?
  largest_contentful_paint String?
  accessibility_score      Float?
  best_practices_score     Float?
  best_practices           Json?
  pwa_score                Float?
  total_blocking_time      String?
  speed_index              String?
  cumulative_layout_shift  String?
  time_to_interactive      String?
  total_broken_links       Int?
  broken_links             Json?
  audit_details            Json?
  revenue_loss_percent     Float?  // <--  Newly added field
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now()) @updatedAt

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model brand_traffic_analysis {
  traffic_analysis_id String   @id @default(uuid())
  website_id          String
  total_visitors      Int?
  organic_search      Int?
  direct              Int?
  referral            Int?
  organic_social      Int?
  unassigned          Int?
  high_bounce_pages   Json?
  top_countries       Json?
  overall_bounce_rate Float?
  actionable_fix      String?
  daily_active_users  Json? 
  avg_session_duration    Float?    // new
  engagement_rate         Float?    // new
  engaged_sessions        Int?      // new
  top_devices             Json?     // new
  top_browsers            Json?     // new
  top_sources             Json? 
  new_vs_returning         Json? 
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now()) @updatedAt

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model website_scraped_data {
  scraped_data_id   String   @id @default(uuid())
  website_id        String   @unique // 1‑to‑1 with user_websites
  website_url       String
  
  page_title        String?  @db.LongText
  logo_url              String?  @db.LongText
  meta_description  String?  @db.LongText
  meta_keywords     String?  @db.LongText
  og_title          String?  @db.LongText
  og_description    String?  @db.LongText
  og_image          String?  @db.LongText
  twitter_handle    String?  @db.LongText
  facebook_handle   String?  @db.LongText
  instagram_handle  String?  @db.LongText
  linkedin_handle   String?  @db.LongText
  youtube_handle    String?  @db.LongText
  ctr_loss_percent  Json? 
  homepage_alt_text_coverage Int?   // <- Add this
  sitemap_pages     Json? 
  schema_analysis   Json?

  tiktok_handle     String?
  other_links       Json?
  raw_html          String?  @db.LongText

  ai_response      String?  @db.LongText

  //  New fields
  status_code       Int?
  ip_address        String?
  response_time_ms  Int?
  status_message    String?  @db.LongText

  scraped_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  // relations
  user_website       user_websites        @relation("WebsiteScrapedData_UserWebsite", fields: [website_id], references: [website_id])
  competitor_details competitor_details[] @relation("SiteCompetitors")
}

model brand_social_media_analysis {
  social_media_id String   @id @default(uuid())
  website_id      String
  platform_name   String
  followers       Int?
  likes           Int?
  comments        Int?
  shares          Int?
  videos_count    Int?
  posts_count     Int?
  postingFrequency Float?
  dailyPostingGraph Json? // For the 30-day continuous graph
  engagement_rate Float?
  engagementToFollowerRatio Float?
  data            Json?
  graph_data      Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}  



model competitor_details {
  competitor_id    String   @id @default(uuid())
  website_id       String
  name             String?
  competitor_website_url      String? @db.LongText
  industry         String?  @db.LongText
  region           String?  @db.LongText
  target_audience  String?  @db.LongText
  primary_offering String?  @db.LongText
  usp              String?  @db.LongText
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  // relations
  website_scraped_data    website_scraped_data     @relation("SiteCompetitors", fields: [website_id], references: [website_id])
  competitor_data competitor_data?
}

model competitor_data {
  competitor_scraped_id String @id @default(uuid())
  competitor_id         String @unique
  website_id            String // User's website this competitor is related to

  website_url      String
  page_title       String? @db.LongText
  logo_url                 String?  @db.LongText
  meta_description String? @db.LongText
  meta_keywords    String? @db.LongText
  og_title         String? @db.LongText
  og_description   String? @db.LongText
  og_image         String? @db.LongText
  twitter_handle   String? @db.LongText
  facebook_handle  String? @db.LongText
  instagram_handle String? @db.LongText
  linkedin_handle  String? @db.LongText
  
  youtube_handle   String? @db.LongText
  tiktok_handle    String? @db.LongText

  ctr_loss_percent Json?
  revenue_loss_percent Int?
  sitemap_pages     Json? 
  schema_analysis          Json?
  page_speed       Json? // <- Add this line
  other_links      Json?

  raw_html String? @db.LongText

  scraped_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  competitor_details competitor_details @relation(fields: [competitor_id], references: [competitor_id])
  user_websites      user_websites      @relation(fields: [website_id], references: [website_id])
}

model llm_responses {
  id                                        String   @id @default(uuid())
  website_id                                String   @unique
  dashboard1_what_working                   String?  @db.LongText
  dashboard2_what_working                   String?  @db.LongText
  dashboard3_competi_camparison             String?  @db.LongText
  dashboard3_competi_recommedation          String?  @db.LongText
  recommendation_by_mo_dashboard1           String?  @db.LongText
  recommendation_by_mo_dashboard2           String?  @db.LongText
  recommendation_by_mo_dashboard3           String?  @db.LongText
  
  recommendation_by_cmo                     String? @db.LongText
  pagespeed_report                          String?  @db.LongText
  traffic_report                            String?  @db.LongText
  broken_links_report                       String?  @db.LongText
  
  
  brand_audit                               String?  @db.LongText
  geo_llm                                   String?  @db.LongText
  competitor_ps_report             String?  @db.LongText
  competitor_social_media_report   String?  @db.LongText
  created_at                    DateTime @default(now())
  updated_at                    DateTime @default(now()) @updatedAt

  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model user_requirements {
  requirement_id      String  @id @default(uuid())
  user_id             String
  website_id          String
  property_id         String?
  access_token        String?  @db.LongText
  refresh_token       String? @db.LongText
  profile             Json?
  session_id          String? @db.LongText
  fetched_properties  Json?
  summary_status      String? // e.g., "pending", "success", "error"
  summary_data        Json?
  competitor_urls     String? @db.LongText
  ip_address          String? @db.LongText
  user_agent          String? @db.LongText
  industry            String? @db.LongText
  region_of_operation String? @db.LongText
  target_location     String? @db.LongText
  target_audience     String? @db.LongText
  primary_offering    String? @db.LongText
  USP                 String? @db.LongText

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  users         users         @relation(fields: [user_id], references: [user_id])
  user_websites user_websites @relation(fields: [website_id], references: [website_id])
}

model analysis_status {
  id                    String   @id @default(uuid())
  user_id               String
  website_id            String
  dashboard1            String?
  dashboard2            String?
  dashboard3            String?
  dashboard4            String?
  website_audit         String? 
  seo_audit             String? 
  technical_seo         String?
  geo_llm               String?
  social_media_analysis String? 
  competitor_details   String?  
  recommendation_by_mo1 String? 
  recommendation_by_mo2 String?
  recommendation_by_mo3 String? 
  recommendation_by_cmo String? 
  

created_at DateTime @default(now())
updated_at DateTime @updatedAt

  users         users         @relation(fields: [user_id], references: [user_id])
  user_websites user_websites @relation(fields: [website_id], references: [website_id])

  @@unique([user_id, website_id]) // One record per user-website
}

model plans {
  plan_id       String          @id @default(uuid())
  plan_name     String
  price         Decimal
  currency      String
  features      Json?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now()) @updatedAt
  subscriptions subscriptions[]
}

model subscriptions {
  subscription_id String     @id @default(uuid())
  user_id         String
  plan_id         String
  start_date      DateTime
  end_date        DateTime?
  status          String
  payment_status  String
  created_at      DateTime   @default(now())
  updated_at      DateTime   @default(now()) @updatedAt
  users           users      @relation(fields: [user_id], references: [user_id])
  plans           plans      @relation(fields: [plan_id], references: [plan_id])
  payments        payments[]
}

model payments {
  payment_id      String         @id @default(uuid())
  user_id         String
  amount          Decimal
  currency        String
  payment_method  String
  payment_status  String
  transaction_id  String?
  subscription_id String?
  website_id      String?
  analysis_type   String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now()) @updatedAt
  users           users          @relation(fields: [user_id], references: [user_id])
  subscriptions   subscriptions? @relation(fields: [subscription_id], references: [subscription_id])
  user_websites   user_websites? @relation(fields: [website_id], references: [website_id])
}
